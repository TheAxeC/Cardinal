libSource =
"class System {}\n"
"class Fiber {}\n"
"class Num {}\n"
"class Null {}\n"
"class Fn {}\n"
"class Bool {}\n"
"class Method {}\n"
"class Module {}\n"
"\n"
"class Exception {\n"
"	fields {\n"
"		_message\n"
"		_stack\n"
"	}\n"
"	\n"
"	construct new(mes) {\n"
"		_message = mes\n"
"	}\n"
"	\n"
"	setMessage(a) {\n"
"		_message = a\n"
"	}\n"
"	\n"
"	getMessage { _message }\n"
"	\n"
"	toString { _message }\n"
"	\n"
"	getStackTrace { _stack }\n"
"}\n"
"\n"
"class Sequence {\n"
"	all(f) {\n"
"		var result = true\n"
"		for (element in this) {\n"
"			result = f.call(element)\n"
"			if (!result) return result\n"
"		}\n"
"		return result\n"
"	}\n"
"\n"
"	any(f) {\n"
"		var result = false\n"
"		for (element in this) {\n"
"			result = f.call(element)\n"
"			if (result) return result\n"
"		}\n"
"		return result\n"
"	}\n"
"	\n"
"	contains(element) {\n"
"		for (item in this) {\n"
"			if (element == item) return true\n"
"		}\n"
"		return false\n"
"	}\n"
"\n"
"	count {\n"
"		var result = 0\n"
"		for (element in this) {\n"
"			result = result + 1\n"
"		}\n"
"		return result\n"
"	}\n"
"\n"
"	count(f) {\n"
"		var result = 0\n"
"		for (element in this) {\n"
"			if (f.call(element)) result = result + 1\n"
"		}\n"
"		return result\n"
"	}\n"
"\n"
"	each(f) {\n"
"		for (element in this) {\n"
"			f.call(element)\n"
"		}\n"
"	}\n"
"	\n"
"	map(f) {\n"
"		var result = List.new\n"
"		for (element in this) {\n"
"			result.add(f.call(element))\n"
"		}\n"
"		return result\n"
"	}\n"
"\n"
"	where(f) {\n"
"		var result = List.new\n"
"		for (element in this) {\n"
"			if (f.call(element)) result.add(element)\n"
"		}\n"
"		return result\n"
"	}\n"
"\n"
"	//map(transformation) { MapSequence.new(this, transformation) }\n"
"\n"
"	//where(predicate) { WhereSequence.new(this, predicate) }\n"
"  \n"
"	reduce(acc, f) {\n"
"		for (element in this) {\n"
"			acc = f.call(acc, element)\n"
"		}\n"
"		return acc\n"
"	}\n"
"\n"
"	reduce(f) {\n"
"		var iter = iterate(null)\n"
"		if (!iter) Fiber.abort(\"Can't reduce an empty sequence.\")\n"
"\n"
"		// Seed with the first element.\n"
"		var result = iteratorValue(iter)\n"
"		while (iter = iterate(iter)) {\n"
"			result = f.call(result, iteratorValue(iter))\n"
"		}\n"
"\n"
"		return result\n"
"	}\n"
"\n"
"	join { join(\"\") }\n"
"\n"
"	join(sep) {\n"
"		var first = true\n"
"		var result = \"\"\n"
"\n"
"		for (element in this) {\n"
"			if (!first) result = result + sep\n"
"			first = false\n"
"			result = result + element.toString\n"
"		}\n"
"\n"
"		return result\n"
"	}\n"
"  \n"
"	toList {\n"
"		var result = List.new\n"
"		for (element in this) {\n"
"			result.add(element)\n"
"		}\n"
"		return result\n"
"	}\n"
"}\n"
"\n"
"\n"
"class MapSequence is Sequence {\n"
"	fields {\n"
"		_sequence\n"
"		_fn\n"
"	}\n"
"	construct new(sequence, fn) {\n"
"		_sequence = sequence\n"
"		_fn = fn\n"
"	}\n"
"\n"
"	iterate(iterator) { _sequence.iterate(iterator) }\n"
"	iteratorValue(iterator) { _fn.call(_sequence.iteratorValue(iterator)) }\n"
"}\n"
"\n"
"class WhereSequence is Sequence {\n"
"	fields {\n"
"		_sequence\n"
"		_fn\n"
"	}\n"
"	\n"
"	construct new(sequence, fn) {\n"
"		_sequence = sequence\n"
"		_fn = fn\n"
"	}\n"
"\n"
"	iterate(iterator) {\n"
"		while (iterator = _sequence.iterate(iterator)) {\n"
"		  if (_fn.call(_sequence.iteratorValue(iterator))) break\n"
"		}\n"
"		return iterator\n"
"	}\n"
"\n"
"	iteratorValue(iterator) { _sequence.iteratorValue(iterator) }\n"
"}\n"
"\n"
"class String is Sequence {  \n"
"	bytes { StringByteSequence.new(this) }\n"
"}\n"
"\n"
"class StringByteSequence is Sequence {\n"
"	fields {\n"
"		_string\n"
"	}\n"
"	construct new(string) {\n"
"		_string = string\n"
"	}\n"
"\n"
"	[index] { _string.byteAt(index) }\n"
"	iterate(iterator) { _string.iterateByte_(iterator) }\n"
"	iteratorValue(iterator) { _string.byteAt(iterator) }\n"
"}\n"
"\n"
"class List is Sequence {\n"
"	addAll(other) {\n"
"		for (element in other) {\n"
"			add(element)\n"
"		}\n"
"		return other\n"
"	}\n"
"	\n"
"	toString { \"[\" + join(\", \") + \"]\" }\n"
"	\n"
"	+(other) {\n"
"		var result = this[0..-1]\n"
"		for (element in other) {\n"
"			result.add(element)\n"
"		}\n"
"		return result\n"
"	}\n"
"	\n"
"	contains(element) {\n"
"		for (item in this) {\n"
"			if (element == item) {\n"
"				return true\n"
"			}\n"
"		}\n"
"			   return false\n"
"	}\n"
"}\n"
"\n"
"class Map {\n"
"	keys { MapKeySequence.new(this) }\n"
"	values { MapValueSequence.new(this) }\n"
"\n"
"	toString {\n"
"		var first = true\n"
"		var result = \"{\"\n"
"\n"
"		for (key in keys) {\n"
"			if (!first) result = result + \", \"\n"
"			first = false\n"
"			result = result + key.toString + \": \" + this[key].toString\n"
"		}\n"
"\n"
"		return result + \"}\"\n"
"	}\n"
"}\n"
"\n"
"class MapKeySequence is Sequence {\n"
"	fields {\n"
"		_map\n"
"	}\n"
"\n"
"	construct new(map) {\n"
"		_map = map\n"
"	}\n"
"\n"
"	iterate(n) { _map.iterate_(n) }\n"
"	iteratorValue(iterator) { _map.keyIteratorValue_(iterator) }\n"
"}\n"
"\n"
"class MapValueSequence is Sequence {\n"
"	fields {\n"
"		_map\n"
"	}\n"
"\n"
"	construct new(map) {\n"
"		_map = map\n"
"	}\n"
"\n"
"	iterate(n) { _map.iterate_(n) }\n"
"	iteratorValue(iterator) { _map.valueIteratorValue_(iterator) }\n"
"}\n"
"\n"
"\n"
"class Range is Sequence {}\n"
"\n"
"class Table {\n"
"	keys { TableKeySequence.new(this) }\n"
"	values { TableValueSequence.new(this) }\n"
"\n"
"	toString {\n"
"		var first = true\n"
"		var result = \"{\"\n"
"\n"
"		for (key in keys) {\n"
"			if (!first) result = result + \", \"\n"
"			first = false\n"
"			result = result + key.toString + \": \" + this[key].toString\n"
"		}\n"
"\n"
"		return result + \"}\"\n"
"	}\n"
"}\n"
"\n"
"class TableKeySequence is Sequence {\n"
"	fields {\n"
"		_map\n"
"	}\n"
"\n"
"	construct new(map) {\n"
"		_map = map\n"
"	}\n"
"\n"
"	iterate(n) { _map.iterate_(n) }\n"
"	iteratorValue(iterator) { _map.keyIteratorValue_(iterator) }\n"
"}\n"
"\n"
"class TableValueSequence is Sequence {\n"
"	fields {\n"
"		_map\n"
"	}\n"
"\n"
"	construct new(map) {\n"
"		_map = map\n"
"	}\n"
"\n"
"	iterate(n) { _map.iterate_(n) }\n"
"	iteratorValue(iterator) { _map.valueIteratorValue_(iterator) }\n"
"}\n";