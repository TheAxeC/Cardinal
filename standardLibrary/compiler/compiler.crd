
import "nodes" for Node from Local
import "lexer" for Lexer
import "Bytecode" from Bytecode

// The main compiler
class Compiler {

	// The parser used to parse the source code
	field _parser

	// The parent compiler
	field _parent
	
	// The constants that have been defined
	field _constants
	
	// The locals that have been defined
	field _locals
	
	// number of parameters
	field _numParams
	
	// upvalues that have been captured
	field _upvalues

	// innermost loop
	field _loop

	// scope
	field _scope

	// Bytecode buffer
	field bytecode
	
	// source lines
	field sourceLines
	field sourceLineNbr
	
	// source
	field debugSourcePath
	field debugName

	// Module we work in
	field _module

	construct new(parser, parent, isFunc) {
		_parser = parser
		_parent = parent
		_numParams = 0
		_constants = []
		_locals = []
		_upvalues = []
		_sourceLines = []
		_sourceLineNbr = []
		_debugSourcePath = []
		_debugName = ""
		_bytecode = Bytecode.new()
		
		if (_parent == null) {
			_scope = -1
		} else {
			_scope = 0
			if (isFunc) {
				_locals.add(Local.new(-1, false, null))
			} else {
				_locals.add(Local.new(-1, false, "this"))
			}
		}
	}

	// Get the top compiler
	getTopCompiler() {
		var comp = this
		while (comp.parent != null) comp = comp.parent
		return comp
	}

	// Get the parent
	parent { _parent }

	// Add a new constant
	addConstant(const) { _constants.add(const) }

	// Define a local variable
	defineLocal(str) {
		_locals.add(Local.new(_scope, false, str))
	}

	// Declare a variable name
	declareVariableName(name) {
		if (_scope == -1) {
			_module[name] = null
			return
		}

		for(i in _locals.count..0) {
			var l = _locals[i]

			if (l.depth < _scope) break

			if (l.str == name) return i
		}

		return defineLocal(name)
	}

	// Declare variable
	declareVariable() {
		declareVariableName(_parser.prev().str)
	}

	// Stores a variable with the previously defined symbol in the current scope.
	defineVariable(symbol) {

	}

	// Starts a new local block scope.
	pushScope() { 
		_scope = _scope + 1
	}

	discardLocals(depth) {

	}

	// Closes the last pushed block scope and discards any local variables declared
	// in that scope. This should only be called in a statement context where no
	// temporaries are still on the stack.
	popScope() {
		discardLocals(_scope)
		_scope = _scope - 1
	}

	// Attempts to look up the name in the local variables of [compiler]. If found,
	// returns its index, otherwise returns -1.
	resolveLocal(name) {
		for(i in _locals.count..0) {
			var l = _locals[i]

			if (l.str == name) return i
		}
		return -1
	}
}


